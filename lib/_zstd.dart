// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// zstd ffi binding in Dart
class ZStd {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ZStd(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ZStd.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int ZSTD_versionNumber() {
    return _ZSTD_versionNumber();
  }

  late final _ZSTD_versionNumberPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'ZSTD_versionNumber');
  late final _ZSTD_versionNumber =
      _ZSTD_versionNumberPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> ZSTD_versionString() {
    return _ZSTD_versionString();
  }

  late final _ZSTD_versionStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ZSTD_versionString');
  late final _ZSTD_versionString =
      _ZSTD_versionStringPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int ZSTD_compress(
    ffi.Pointer<ffi.Void> dst,
    int dstCapacity,
    ffi.Pointer<ffi.Void> src,
    int srcSize,
    int compressionLevel,
  ) {
    return _ZSTD_compress(
      dst,
      dstCapacity,
      src,
      srcSize,
      compressionLevel,
    );
  }

  late final _ZSTD_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>('ZSTD_compress');
  late final _ZSTD_compress = _ZSTD_compressPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int, int)>();

  int ZSTD_decompress(
    ffi.Pointer<ffi.Void> dst,
    int dstCapacity,
    ffi.Pointer<ffi.Void> src,
    int compressedSize,
  ) {
    return _ZSTD_decompress(
      dst,
      dstCapacity,
      src,
      compressedSize,
    );
  }

  late final _ZSTD_decompressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('ZSTD_decompress');
  late final _ZSTD_decompress = _ZSTD_decompressPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  int ZSTD_getFrameContentSize(
    ffi.Pointer<ffi.Void> src,
    int srcSize,
  ) {
    return _ZSTD_getFrameContentSize(
      src,
      srcSize,
    );
  }

  late final _ZSTD_getFrameContentSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('ZSTD_getFrameContentSize');
  late final _ZSTD_getFrameContentSize = _ZSTD_getFrameContentSizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int ZSTD_getDecompressedSize(
    ffi.Pointer<ffi.Void> src,
    int srcSize,
  ) {
    return _ZSTD_getDecompressedSize(
      src,
      srcSize,
    );
  }

  late final _ZSTD_getDecompressedSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('ZSTD_getDecompressedSize');
  late final _ZSTD_getDecompressedSize = _ZSTD_getDecompressedSizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int ZSTD_findFrameCompressedSize(
    ffi.Pointer<ffi.Void> src,
    int srcSize,
  ) {
    return _ZSTD_findFrameCompressedSize(
      src,
      srcSize,
    );
  }

  late final _ZSTD_findFrameCompressedSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>,
              ffi.Size)>>('ZSTD_findFrameCompressedSize');
  late final _ZSTD_findFrameCompressedSize = _ZSTD_findFrameCompressedSizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int ZSTD_compressBound(
    int srcSize,
  ) {
    return _ZSTD_compressBound(
      srcSize,
    );
  }

  late final _ZSTD_compressBoundPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Size)>>(
          'ZSTD_compressBound');
  late final _ZSTD_compressBound =
      _ZSTD_compressBoundPtr.asFunction<int Function(int)>();

  int ZSTD_isError(
    int code,
  ) {
    return _ZSTD_isError(
      code,
    );
  }

  late final _ZSTD_isErrorPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Size)>>(
          'ZSTD_isError');
  late final _ZSTD_isError = _ZSTD_isErrorPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> ZSTD_getErrorName(
    int code,
  ) {
    return _ZSTD_getErrorName(
      code,
    );
  }

  late final _ZSTD_getErrorNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Size)>>(
          'ZSTD_getErrorName');
  late final _ZSTD_getErrorName =
      _ZSTD_getErrorNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ZSTD_minCLevel() {
    return _ZSTD_minCLevel();
  }

  late final _ZSTD_minCLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ZSTD_minCLevel');
  late final _ZSTD_minCLevel = _ZSTD_minCLevelPtr.asFunction<int Function()>();

  int ZSTD_maxCLevel() {
    return _ZSTD_maxCLevel();
  }

  late final _ZSTD_maxCLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ZSTD_maxCLevel');
  late final _ZSTD_maxCLevel = _ZSTD_maxCLevelPtr.asFunction<int Function()>();

  ffi.Pointer<ZSTD_CCtx> ZSTD_createCCtx() {
    return _ZSTD_createCCtx();
  }

  late final _ZSTD_createCCtxPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ZSTD_CCtx> Function()>>(
          'ZSTD_createCCtx');
  late final _ZSTD_createCCtx =
      _ZSTD_createCCtxPtr.asFunction<ffi.Pointer<ZSTD_CCtx> Function()>();

  int ZSTD_freeCCtx(
    ffi.Pointer<ZSTD_CCtx> cctx,
  ) {
    return _ZSTD_freeCCtx(
      cctx,
    );
  }

  late final _ZSTD_freeCCtxPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ZSTD_CCtx>)>>(
          'ZSTD_freeCCtx');
  late final _ZSTD_freeCCtx =
      _ZSTD_freeCCtxPtr.asFunction<int Function(ffi.Pointer<ZSTD_CCtx>)>();

  int ZSTD_compressCCtx(
    ffi.Pointer<ZSTD_CCtx> cctx,
    ffi.Pointer<ffi.Void> dst,
    int dstCapacity,
    ffi.Pointer<ffi.Void> src,
    int srcSize,
    int compressionLevel,
  ) {
    return _ZSTD_compressCCtx(
      cctx,
      dst,
      dstCapacity,
      src,
      srcSize,
      compressionLevel,
    );
  }

  late final _ZSTD_compressCCtxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ZSTD_CCtx>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Int)>>('ZSTD_compressCCtx');
  late final _ZSTD_compressCCtx = _ZSTD_compressCCtxPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_CCtx>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ZSTD_DCtx> ZSTD_createDCtx() {
    return _ZSTD_createDCtx();
  }

  late final _ZSTD_createDCtxPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ZSTD_DCtx> Function()>>(
          'ZSTD_createDCtx');
  late final _ZSTD_createDCtx =
      _ZSTD_createDCtxPtr.asFunction<ffi.Pointer<ZSTD_DCtx> Function()>();

  int ZSTD_freeDCtx(
    ffi.Pointer<ZSTD_DCtx> dctx,
  ) {
    return _ZSTD_freeDCtx(
      dctx,
    );
  }

  late final _ZSTD_freeDCtxPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ZSTD_DCtx>)>>(
          'ZSTD_freeDCtx');
  late final _ZSTD_freeDCtx =
      _ZSTD_freeDCtxPtr.asFunction<int Function(ffi.Pointer<ZSTD_DCtx>)>();

  int ZSTD_decompressDCtx(
    ffi.Pointer<ZSTD_DCtx> dctx,
    ffi.Pointer<ffi.Void> dst,
    int dstCapacity,
    ffi.Pointer<ffi.Void> src,
    int srcSize,
  ) {
    return _ZSTD_decompressDCtx(
      dctx,
      dst,
      dstCapacity,
      src,
      srcSize,
    );
  }

  late final _ZSTD_decompressDCtxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ZSTD_DCtx>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>>('ZSTD_decompressDCtx');
  late final _ZSTD_decompressDCtx = _ZSTD_decompressDCtxPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_DCtx>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  ZSTD_bounds ZSTD_cParam_getBounds(
    int cParam,
  ) {
    return _ZSTD_cParam_getBounds(
      cParam,
    );
  }

  late final _ZSTD_cParam_getBoundsPtr =
      _lookup<ffi.NativeFunction<ZSTD_bounds Function(ffi.Int32)>>(
          'ZSTD_cParam_getBounds');
  late final _ZSTD_cParam_getBounds =
      _ZSTD_cParam_getBoundsPtr.asFunction<ZSTD_bounds Function(int)>();

  int ZSTD_CCtx_setParameter(
    ffi.Pointer<ZSTD_CCtx> cctx,
    int param,
    int value,
  ) {
    return _ZSTD_CCtx_setParameter(
      cctx,
      param,
      value,
    );
  }

  late final _ZSTD_CCtx_setParameterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ZSTD_CCtx>, ffi.Int32,
              ffi.Int)>>('ZSTD_CCtx_setParameter');
  late final _ZSTD_CCtx_setParameter = _ZSTD_CCtx_setParameterPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_CCtx>, int, int)>();

  int ZSTD_CCtx_setPledgedSrcSize(
    ffi.Pointer<ZSTD_CCtx> cctx,
    int pledgedSrcSize,
  ) {
    return _ZSTD_CCtx_setPledgedSrcSize(
      cctx,
      pledgedSrcSize,
    );
  }

  late final _ZSTD_CCtx_setPledgedSrcSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ZSTD_CCtx>,
              ffi.UnsignedLongLong)>>('ZSTD_CCtx_setPledgedSrcSize');
  late final _ZSTD_CCtx_setPledgedSrcSize = _ZSTD_CCtx_setPledgedSrcSizePtr
      .asFunction<int Function(ffi.Pointer<ZSTD_CCtx>, int)>();

  int ZSTD_CCtx_reset(
    ffi.Pointer<ZSTD_CCtx> cctx,
    int reset,
  ) {
    return _ZSTD_CCtx_reset(
      cctx,
      reset,
    );
  }

  late final _ZSTD_CCtx_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ZSTD_CCtx>, ffi.Int32)>>('ZSTD_CCtx_reset');
  late final _ZSTD_CCtx_reset = _ZSTD_CCtx_resetPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_CCtx>, int)>();

  int ZSTD_compress2(
    ffi.Pointer<ZSTD_CCtx> cctx,
    ffi.Pointer<ffi.Void> dst,
    int dstCapacity,
    ffi.Pointer<ffi.Void> src,
    int srcSize,
  ) {
    return _ZSTD_compress2(
      cctx,
      dst,
      dstCapacity,
      src,
      srcSize,
    );
  }

  late final _ZSTD_compress2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ZSTD_CCtx>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Pointer<ffi.Void>, ffi.Size)>>('ZSTD_compress2');
  late final _ZSTD_compress2 = _ZSTD_compress2Ptr.asFunction<
      int Function(ffi.Pointer<ZSTD_CCtx>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  ZSTD_bounds ZSTD_dParam_getBounds(
    int dParam,
  ) {
    return _ZSTD_dParam_getBounds(
      dParam,
    );
  }

  late final _ZSTD_dParam_getBoundsPtr =
      _lookup<ffi.NativeFunction<ZSTD_bounds Function(ffi.Int32)>>(
          'ZSTD_dParam_getBounds');
  late final _ZSTD_dParam_getBounds =
      _ZSTD_dParam_getBoundsPtr.asFunction<ZSTD_bounds Function(int)>();

  int ZSTD_DCtx_setParameter(
    ffi.Pointer<ZSTD_DCtx> dctx,
    int param,
    int value,
  ) {
    return _ZSTD_DCtx_setParameter(
      dctx,
      param,
      value,
    );
  }

  late final _ZSTD_DCtx_setParameterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ZSTD_DCtx>, ffi.Int32,
              ffi.Int)>>('ZSTD_DCtx_setParameter');
  late final _ZSTD_DCtx_setParameter = _ZSTD_DCtx_setParameterPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_DCtx>, int, int)>();

  int ZSTD_DCtx_reset(
    ffi.Pointer<ZSTD_DCtx> dctx,
    int reset,
  ) {
    return _ZSTD_DCtx_reset(
      dctx,
      reset,
    );
  }

  late final _ZSTD_DCtx_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ZSTD_DCtx>, ffi.Int32)>>('ZSTD_DCtx_reset');
  late final _ZSTD_DCtx_reset = _ZSTD_DCtx_resetPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_DCtx>, int)>();

  ffi.Pointer<ZSTD_CStream> ZSTD_createCStream() {
    return _ZSTD_createCStream();
  }

  late final _ZSTD_createCStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ZSTD_CStream> Function()>>(
          'ZSTD_createCStream');
  late final _ZSTD_createCStream =
      _ZSTD_createCStreamPtr.asFunction<ffi.Pointer<ZSTD_CStream> Function()>();

  int ZSTD_freeCStream(
    ffi.Pointer<ZSTD_CStream> zcs,
  ) {
    return _ZSTD_freeCStream(
      zcs,
    );
  }

  late final _ZSTD_freeCStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ZSTD_CStream>)>>(
          'ZSTD_freeCStream');
  late final _ZSTD_freeCStream = _ZSTD_freeCStreamPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_CStream>)>();

  int ZSTD_compressStream2(
    ffi.Pointer<ZSTD_CCtx> cctx,
    ffi.Pointer<ZSTD_outBuffer> output,
    ffi.Pointer<ZSTD_inBuffer> input,
    int endOp,
  ) {
    return _ZSTD_compressStream2(
      cctx,
      output,
      input,
      endOp,
    );
  }

  late final _ZSTD_compressStream2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ZSTD_CCtx>, ffi.Pointer<ZSTD_outBuffer>,
              ffi.Pointer<ZSTD_inBuffer>, ffi.Int32)>>('ZSTD_compressStream2');
  late final _ZSTD_compressStream2 = _ZSTD_compressStream2Ptr.asFunction<
      int Function(ffi.Pointer<ZSTD_CCtx>, ffi.Pointer<ZSTD_outBuffer>,
          ffi.Pointer<ZSTD_inBuffer>, int)>();

  int ZSTD_CStreamInSize() {
    return _ZSTD_CStreamInSize();
  }

  late final _ZSTD_CStreamInSizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('ZSTD_CStreamInSize');
  late final _ZSTD_CStreamInSize =
      _ZSTD_CStreamInSizePtr.asFunction<int Function()>();

  int ZSTD_CStreamOutSize() {
    return _ZSTD_CStreamOutSize();
  }

  late final _ZSTD_CStreamOutSizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('ZSTD_CStreamOutSize');
  late final _ZSTD_CStreamOutSize =
      _ZSTD_CStreamOutSizePtr.asFunction<int Function()>();

  int ZSTD_initCStream(
    ffi.Pointer<ZSTD_CStream> zcs,
    int compressionLevel,
  ) {
    return _ZSTD_initCStream(
      zcs,
      compressionLevel,
    );
  }

  late final _ZSTD_initCStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ZSTD_CStream>, ffi.Int)>>('ZSTD_initCStream');
  late final _ZSTD_initCStream = _ZSTD_initCStreamPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_CStream>, int)>();

  int ZSTD_compressStream(
    ffi.Pointer<ZSTD_CStream> zcs,
    ffi.Pointer<ZSTD_outBuffer> output,
    ffi.Pointer<ZSTD_inBuffer> input,
  ) {
    return _ZSTD_compressStream(
      zcs,
      output,
      input,
    );
  }

  late final _ZSTD_compressStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ZSTD_CStream>,
              ffi.Pointer<ZSTD_outBuffer>,
              ffi.Pointer<ZSTD_inBuffer>)>>('ZSTD_compressStream');
  late final _ZSTD_compressStream = _ZSTD_compressStreamPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_CStream>, ffi.Pointer<ZSTD_outBuffer>,
          ffi.Pointer<ZSTD_inBuffer>)>();

  int ZSTD_flushStream(
    ffi.Pointer<ZSTD_CStream> zcs,
    ffi.Pointer<ZSTD_outBuffer> output,
  ) {
    return _ZSTD_flushStream(
      zcs,
      output,
    );
  }

  late final _ZSTD_flushStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ZSTD_CStream>,
              ffi.Pointer<ZSTD_outBuffer>)>>('ZSTD_flushStream');
  late final _ZSTD_flushStream = _ZSTD_flushStreamPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_CStream>, ffi.Pointer<ZSTD_outBuffer>)>();

  int ZSTD_endStream(
    ffi.Pointer<ZSTD_CStream> zcs,
    ffi.Pointer<ZSTD_outBuffer> output,
  ) {
    return _ZSTD_endStream(
      zcs,
      output,
    );
  }

  late final _ZSTD_endStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ZSTD_CStream>,
              ffi.Pointer<ZSTD_outBuffer>)>>('ZSTD_endStream');
  late final _ZSTD_endStream = _ZSTD_endStreamPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_CStream>, ffi.Pointer<ZSTD_outBuffer>)>();

  ffi.Pointer<ZSTD_DStream> ZSTD_createDStream() {
    return _ZSTD_createDStream();
  }

  late final _ZSTD_createDStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ZSTD_DStream> Function()>>(
          'ZSTD_createDStream');
  late final _ZSTD_createDStream =
      _ZSTD_createDStreamPtr.asFunction<ffi.Pointer<ZSTD_DStream> Function()>();

  int ZSTD_freeDStream(
    ffi.Pointer<ZSTD_DStream> zds,
  ) {
    return _ZSTD_freeDStream(
      zds,
    );
  }

  late final _ZSTD_freeDStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ZSTD_DStream>)>>(
          'ZSTD_freeDStream');
  late final _ZSTD_freeDStream = _ZSTD_freeDStreamPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_DStream>)>();

  int ZSTD_initDStream(
    ffi.Pointer<ZSTD_DStream> zds,
  ) {
    return _ZSTD_initDStream(
      zds,
    );
  }

  late final _ZSTD_initDStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ZSTD_DStream>)>>(
          'ZSTD_initDStream');
  late final _ZSTD_initDStream = _ZSTD_initDStreamPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_DStream>)>();

  int ZSTD_decompressStream(
    ffi.Pointer<ZSTD_DStream> zds,
    ffi.Pointer<ZSTD_outBuffer> output,
    ffi.Pointer<ZSTD_inBuffer> input,
  ) {
    return _ZSTD_decompressStream(
      zds,
      output,
      input,
    );
  }

  late final _ZSTD_decompressStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ZSTD_DStream>,
              ffi.Pointer<ZSTD_outBuffer>,
              ffi.Pointer<ZSTD_inBuffer>)>>('ZSTD_decompressStream');
  late final _ZSTD_decompressStream = _ZSTD_decompressStreamPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_DStream>, ffi.Pointer<ZSTD_outBuffer>,
          ffi.Pointer<ZSTD_inBuffer>)>();

  int ZSTD_DStreamInSize() {
    return _ZSTD_DStreamInSize();
  }

  late final _ZSTD_DStreamInSizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('ZSTD_DStreamInSize');
  late final _ZSTD_DStreamInSize =
      _ZSTD_DStreamInSizePtr.asFunction<int Function()>();

  int ZSTD_DStreamOutSize() {
    return _ZSTD_DStreamOutSize();
  }

  late final _ZSTD_DStreamOutSizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('ZSTD_DStreamOutSize');
  late final _ZSTD_DStreamOutSize =
      _ZSTD_DStreamOutSizePtr.asFunction<int Function()>();

  int ZSTD_compress_usingDict(
    ffi.Pointer<ZSTD_CCtx> ctx,
    ffi.Pointer<ffi.Void> dst,
    int dstCapacity,
    ffi.Pointer<ffi.Void> src,
    int srcSize,
    ffi.Pointer<ffi.Void> dict,
    int dictSize,
    int compressionLevel,
  ) {
    return _ZSTD_compress_usingDict(
      ctx,
      dst,
      dstCapacity,
      src,
      srcSize,
      dict,
      dictSize,
      compressionLevel,
    );
  }

  late final _ZSTD_compress_usingDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ZSTD_CCtx>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Int)>>('ZSTD_compress_usingDict');
  late final _ZSTD_compress_usingDict = _ZSTD_compress_usingDictPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_CCtx>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int, int)>();

  int ZSTD_decompress_usingDict(
    ffi.Pointer<ZSTD_DCtx> dctx,
    ffi.Pointer<ffi.Void> dst,
    int dstCapacity,
    ffi.Pointer<ffi.Void> src,
    int srcSize,
    ffi.Pointer<ffi.Void> dict,
    int dictSize,
  ) {
    return _ZSTD_decompress_usingDict(
      dctx,
      dst,
      dstCapacity,
      src,
      srcSize,
      dict,
      dictSize,
    );
  }

  late final _ZSTD_decompress_usingDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ZSTD_DCtx>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>>('ZSTD_decompress_usingDict');
  late final _ZSTD_decompress_usingDict =
      _ZSTD_decompress_usingDictPtr.asFunction<
          int Function(ffi.Pointer<ZSTD_DCtx>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ZSTD_CDict> ZSTD_createCDict(
    ffi.Pointer<ffi.Void> dictBuffer,
    int dictSize,
    int compressionLevel,
  ) {
    return _ZSTD_createCDict(
      dictBuffer,
      dictSize,
      compressionLevel,
    );
  }

  late final _ZSTD_createCDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ZSTD_CDict> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>('ZSTD_createCDict');
  late final _ZSTD_createCDict = _ZSTD_createCDictPtr.asFunction<
      ffi.Pointer<ZSTD_CDict> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int ZSTD_freeCDict(
    ffi.Pointer<ZSTD_CDict> CDict,
  ) {
    return _ZSTD_freeCDict(
      CDict,
    );
  }

  late final _ZSTD_freeCDictPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ZSTD_CDict>)>>(
          'ZSTD_freeCDict');
  late final _ZSTD_freeCDict =
      _ZSTD_freeCDictPtr.asFunction<int Function(ffi.Pointer<ZSTD_CDict>)>();

  int ZSTD_compress_usingCDict(
    ffi.Pointer<ZSTD_CCtx> cctx,
    ffi.Pointer<ffi.Void> dst,
    int dstCapacity,
    ffi.Pointer<ffi.Void> src,
    int srcSize,
    ffi.Pointer<ZSTD_CDict> cdict,
  ) {
    return _ZSTD_compress_usingCDict(
      cctx,
      dst,
      dstCapacity,
      src,
      srcSize,
      cdict,
    );
  }

  late final _ZSTD_compress_usingCDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ZSTD_CCtx>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ZSTD_CDict>)>>('ZSTD_compress_usingCDict');
  late final _ZSTD_compress_usingCDict =
      _ZSTD_compress_usingCDictPtr.asFunction<
          int Function(ffi.Pointer<ZSTD_CCtx>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ZSTD_CDict>)>();

  ffi.Pointer<ZSTD_DDict> ZSTD_createDDict(
    ffi.Pointer<ffi.Void> dictBuffer,
    int dictSize,
  ) {
    return _ZSTD_createDDict(
      dictBuffer,
      dictSize,
    );
  }

  late final _ZSTD_createDDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ZSTD_DDict> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('ZSTD_createDDict');
  late final _ZSTD_createDDict = _ZSTD_createDDictPtr.asFunction<
      ffi.Pointer<ZSTD_DDict> Function(ffi.Pointer<ffi.Void>, int)>();

  int ZSTD_freeDDict(
    ffi.Pointer<ZSTD_DDict> ddict,
  ) {
    return _ZSTD_freeDDict(
      ddict,
    );
  }

  late final _ZSTD_freeDDictPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ZSTD_DDict>)>>(
          'ZSTD_freeDDict');
  late final _ZSTD_freeDDict =
      _ZSTD_freeDDictPtr.asFunction<int Function(ffi.Pointer<ZSTD_DDict>)>();

  int ZSTD_decompress_usingDDict(
    ffi.Pointer<ZSTD_DCtx> dctx,
    ffi.Pointer<ffi.Void> dst,
    int dstCapacity,
    ffi.Pointer<ffi.Void> src,
    int srcSize,
    ffi.Pointer<ZSTD_DDict> ddict,
  ) {
    return _ZSTD_decompress_usingDDict(
      dctx,
      dst,
      dstCapacity,
      src,
      srcSize,
      ddict,
    );
  }

  late final _ZSTD_decompress_usingDDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ZSTD_DCtx>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ZSTD_DDict>)>>('ZSTD_decompress_usingDDict');
  late final _ZSTD_decompress_usingDDict =
      _ZSTD_decompress_usingDDictPtr.asFunction<
          int Function(ffi.Pointer<ZSTD_DCtx>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ZSTD_DDict>)>();

  int ZSTD_getDictID_fromDict(
    ffi.Pointer<ffi.Void> dict,
    int dictSize,
  ) {
    return _ZSTD_getDictID_fromDict(
      dict,
      dictSize,
    );
  }

  late final _ZSTD_getDictID_fromDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('ZSTD_getDictID_fromDict');
  late final _ZSTD_getDictID_fromDict = _ZSTD_getDictID_fromDictPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int)>();

  int ZSTD_getDictID_fromDDict(
    ffi.Pointer<ZSTD_DDict> ddict,
  ) {
    return _ZSTD_getDictID_fromDDict(
      ddict,
    );
  }

  late final _ZSTD_getDictID_fromDDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ZSTD_DDict>)>>('ZSTD_getDictID_fromDDict');
  late final _ZSTD_getDictID_fromDDict = _ZSTD_getDictID_fromDDictPtr
      .asFunction<int Function(ffi.Pointer<ZSTD_DDict>)>();

  int ZSTD_getDictID_fromFrame(
    ffi.Pointer<ffi.Void> src,
    int srcSize,
  ) {
    return _ZSTD_getDictID_fromFrame(
      src,
      srcSize,
    );
  }

  late final _ZSTD_getDictID_fromFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('ZSTD_getDictID_fromFrame');
  late final _ZSTD_getDictID_fromFrame = _ZSTD_getDictID_fromFramePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int ZSTD_CCtx_loadDictionary(
    ffi.Pointer<ZSTD_CCtx> cctx,
    ffi.Pointer<ffi.Void> dict,
    int dictSize,
  ) {
    return _ZSTD_CCtx_loadDictionary(
      cctx,
      dict,
      dictSize,
    );
  }

  late final _ZSTD_CCtx_loadDictionaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ZSTD_CCtx>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('ZSTD_CCtx_loadDictionary');
  late final _ZSTD_CCtx_loadDictionary =
      _ZSTD_CCtx_loadDictionaryPtr.asFunction<
          int Function(ffi.Pointer<ZSTD_CCtx>, ffi.Pointer<ffi.Void>, int)>();

  int ZSTD_CCtx_refCDict(
    ffi.Pointer<ZSTD_CCtx> cctx,
    ffi.Pointer<ZSTD_CDict> cdict,
  ) {
    return _ZSTD_CCtx_refCDict(
      cctx,
      cdict,
    );
  }

  late final _ZSTD_CCtx_refCDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ZSTD_CCtx>,
              ffi.Pointer<ZSTD_CDict>)>>('ZSTD_CCtx_refCDict');
  late final _ZSTD_CCtx_refCDict = _ZSTD_CCtx_refCDictPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_CCtx>, ffi.Pointer<ZSTD_CDict>)>();

  int ZSTD_CCtx_refPrefix(
    ffi.Pointer<ZSTD_CCtx> cctx,
    ffi.Pointer<ffi.Void> prefix,
    int prefixSize,
  ) {
    return _ZSTD_CCtx_refPrefix(
      cctx,
      prefix,
      prefixSize,
    );
  }

  late final _ZSTD_CCtx_refPrefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ZSTD_CCtx>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('ZSTD_CCtx_refPrefix');
  late final _ZSTD_CCtx_refPrefix = _ZSTD_CCtx_refPrefixPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_CCtx>, ffi.Pointer<ffi.Void>, int)>();

  int ZSTD_DCtx_loadDictionary(
    ffi.Pointer<ZSTD_DCtx> dctx,
    ffi.Pointer<ffi.Void> dict,
    int dictSize,
  ) {
    return _ZSTD_DCtx_loadDictionary(
      dctx,
      dict,
      dictSize,
    );
  }

  late final _ZSTD_DCtx_loadDictionaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ZSTD_DCtx>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('ZSTD_DCtx_loadDictionary');
  late final _ZSTD_DCtx_loadDictionary =
      _ZSTD_DCtx_loadDictionaryPtr.asFunction<
          int Function(ffi.Pointer<ZSTD_DCtx>, ffi.Pointer<ffi.Void>, int)>();

  int ZSTD_DCtx_refDDict(
    ffi.Pointer<ZSTD_DCtx> dctx,
    ffi.Pointer<ZSTD_DDict> ddict,
  ) {
    return _ZSTD_DCtx_refDDict(
      dctx,
      ddict,
    );
  }

  late final _ZSTD_DCtx_refDDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ZSTD_DCtx>,
              ffi.Pointer<ZSTD_DDict>)>>('ZSTD_DCtx_refDDict');
  late final _ZSTD_DCtx_refDDict = _ZSTD_DCtx_refDDictPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_DCtx>, ffi.Pointer<ZSTD_DDict>)>();

  int ZSTD_DCtx_refPrefix(
    ffi.Pointer<ZSTD_DCtx> dctx,
    ffi.Pointer<ffi.Void> prefix,
    int prefixSize,
  ) {
    return _ZSTD_DCtx_refPrefix(
      dctx,
      prefix,
      prefixSize,
    );
  }

  late final _ZSTD_DCtx_refPrefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ZSTD_DCtx>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('ZSTD_DCtx_refPrefix');
  late final _ZSTD_DCtx_refPrefix = _ZSTD_DCtx_refPrefixPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_DCtx>, ffi.Pointer<ffi.Void>, int)>();

  int ZSTD_sizeof_CCtx(
    ffi.Pointer<ZSTD_CCtx> cctx,
  ) {
    return _ZSTD_sizeof_CCtx(
      cctx,
    );
  }

  late final _ZSTD_sizeof_CCtxPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ZSTD_CCtx>)>>(
          'ZSTD_sizeof_CCtx');
  late final _ZSTD_sizeof_CCtx =
      _ZSTD_sizeof_CCtxPtr.asFunction<int Function(ffi.Pointer<ZSTD_CCtx>)>();

  int ZSTD_sizeof_DCtx(
    ffi.Pointer<ZSTD_DCtx> dctx,
  ) {
    return _ZSTD_sizeof_DCtx(
      dctx,
    );
  }

  late final _ZSTD_sizeof_DCtxPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ZSTD_DCtx>)>>(
          'ZSTD_sizeof_DCtx');
  late final _ZSTD_sizeof_DCtx =
      _ZSTD_sizeof_DCtxPtr.asFunction<int Function(ffi.Pointer<ZSTD_DCtx>)>();

  int ZSTD_sizeof_CStream(
    ffi.Pointer<ZSTD_CStream> zcs,
  ) {
    return _ZSTD_sizeof_CStream(
      zcs,
    );
  }

  late final _ZSTD_sizeof_CStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ZSTD_CStream>)>>(
          'ZSTD_sizeof_CStream');
  late final _ZSTD_sizeof_CStream = _ZSTD_sizeof_CStreamPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_CStream>)>();

  int ZSTD_sizeof_DStream(
    ffi.Pointer<ZSTD_DStream> zds,
  ) {
    return _ZSTD_sizeof_DStream(
      zds,
    );
  }

  late final _ZSTD_sizeof_DStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ZSTD_DStream>)>>(
          'ZSTD_sizeof_DStream');
  late final _ZSTD_sizeof_DStream = _ZSTD_sizeof_DStreamPtr.asFunction<
      int Function(ffi.Pointer<ZSTD_DStream>)>();

  int ZSTD_sizeof_CDict(
    ffi.Pointer<ZSTD_CDict> cdict,
  ) {
    return _ZSTD_sizeof_CDict(
      cdict,
    );
  }

  late final _ZSTD_sizeof_CDictPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ZSTD_CDict>)>>(
          'ZSTD_sizeof_CDict');
  late final _ZSTD_sizeof_CDict =
      _ZSTD_sizeof_CDictPtr.asFunction<int Function(ffi.Pointer<ZSTD_CDict>)>();

  int ZSTD_sizeof_DDict(
    ffi.Pointer<ZSTD_DDict> ddict,
  ) {
    return _ZSTD_sizeof_DDict(
      ddict,
    );
  }

  late final _ZSTD_sizeof_DDictPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ZSTD_DDict>)>>(
          'ZSTD_sizeof_DDict');
  late final _ZSTD_sizeof_DDict =
      _ZSTD_sizeof_DDictPtr.asFunction<int Function(ffi.Pointer<ZSTD_DDict>)>();
}

class ZSTD_CCtx_s extends ffi.Opaque {}

typedef ZSTD_CCtx = ZSTD_CCtx_s;

class ZSTD_DCtx_s extends ffi.Opaque {}

typedef ZSTD_DCtx = ZSTD_DCtx_s;

abstract class ZSTD_strategy {
  static const int ZSTD_fast = 1;
  static const int ZSTD_dfast = 2;
  static const int ZSTD_greedy = 3;
  static const int ZSTD_lazy = 4;
  static const int ZSTD_lazy2 = 5;
  static const int ZSTD_btlazy2 = 6;
  static const int ZSTD_btopt = 7;
  static const int ZSTD_btultra = 8;
  static const int ZSTD_btultra2 = 9;
}

abstract class ZSTD_cParameter {
  static const int ZSTD_c_compressionLevel = 100;
  static const int ZSTD_c_windowLog = 101;
  static const int ZSTD_c_hashLog = 102;
  static const int ZSTD_c_chainLog = 103;
  static const int ZSTD_c_searchLog = 104;
  static const int ZSTD_c_minMatch = 105;
  static const int ZSTD_c_targetLength = 106;
  static const int ZSTD_c_strategy = 107;
  static const int ZSTD_c_enableLongDistanceMatching = 160;
  static const int ZSTD_c_ldmHashLog = 161;
  static const int ZSTD_c_ldmMinMatch = 162;
  static const int ZSTD_c_ldmBucketSizeLog = 163;
  static const int ZSTD_c_ldmHashRateLog = 164;
  static const int ZSTD_c_contentSizeFlag = 200;
  static const int ZSTD_c_checksumFlag = 201;
  static const int ZSTD_c_dictIDFlag = 202;
  static const int ZSTD_c_nbWorkers = 400;
  static const int ZSTD_c_jobSize = 401;
  static const int ZSTD_c_overlapLog = 402;
  static const int ZSTD_c_experimentalParam1 = 500;
  static const int ZSTD_c_experimentalParam2 = 10;
  static const int ZSTD_c_experimentalParam3 = 1000;
  static const int ZSTD_c_experimentalParam4 = 1001;
  static const int ZSTD_c_experimentalParam5 = 1002;
  static const int ZSTD_c_experimentalParam6 = 1003;
  static const int ZSTD_c_experimentalParam7 = 1004;
  static const int ZSTD_c_experimentalParam8 = 1005;
  static const int ZSTD_c_experimentalParam9 = 1006;
  static const int ZSTD_c_experimentalParam10 = 1007;
}

class ZSTD_bounds extends ffi.Struct {
  @ffi.Size()
  external int error;

  @ffi.Int()
  external int lowerBound;

  @ffi.Int()
  external int upperBound;
}

abstract class ZSTD_ResetDirective {
  static const int ZSTD_reset_session_only = 1;
  static const int ZSTD_reset_parameters = 2;
  static const int ZSTD_reset_session_and_parameters = 3;
}

abstract class ZSTD_dParameter {
  static const int ZSTD_d_windowLogMax = 100;
  static const int ZSTD_d_experimentalParam1 = 1000;
  static const int ZSTD_d_experimentalParam2 = 1001;
  static const int ZSTD_d_experimentalParam3 = 1002;
}

class ZSTD_inBuffer_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> src;

  @ffi.Size()
  external int size;

  @ffi.Size()
  external int pos;
}

class ZSTD_outBuffer_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> dst;

  @ffi.Size()
  external int size;

  @ffi.Size()
  external int pos;
}

typedef ZSTD_CStream = ZSTD_CCtx;

abstract class ZSTD_EndDirective {
  static const int ZSTD_e_continue = 0;
  static const int ZSTD_e_flush = 1;
  static const int ZSTD_e_end = 2;
}

typedef ZSTD_outBuffer = ZSTD_outBuffer_s;
typedef ZSTD_inBuffer = ZSTD_inBuffer_s;
typedef ZSTD_DStream = ZSTD_DCtx;

class ZSTD_CDict_s extends ffi.Opaque {}

typedef ZSTD_CDict = ZSTD_CDict_s;

class ZSTD_DDict_s extends ffi.Opaque {}

typedef ZSTD_DDict = ZSTD_DDict_s;

const int ZSTD_VERSION_MAJOR = 1;

const int ZSTD_VERSION_MINOR = 4;

const int ZSTD_VERSION_RELEASE = 6;

const int ZSTD_VERSION_NUMBER = 10406;

const String ZSTD_VERSION_STRING = '1.4.6';

const int ZSTD_CLEVEL_DEFAULT = 3;

const int ZSTD_MAGICNUMBER = 4247762216;

const int ZSTD_MAGIC_DICTIONARY = 3962610743;

const int ZSTD_MAGIC_SKIPPABLE_START = 407710288;

const int ZSTD_MAGIC_SKIPPABLE_MASK = 4294967280;

const int ZSTD_BLOCKSIZELOG_MAX = 17;

const int ZSTD_BLOCKSIZE_MAX = 131072;

const int ZSTD_CONTENTSIZE_UNKNOWN = -1;

const int ZSTD_CONTENTSIZE_ERROR = -2;
